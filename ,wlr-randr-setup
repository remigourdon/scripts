#!/bin/bash
# Setup monitors with wlr-randr
set -Eeuo pipefail

# Grep monitor id (i.e. eDP-1, DP-1, etc) and their name separated by a tab
readarray -t MONITORS <<< "$(wlr-randr | sed -En 's/^([^ ]+) "(.*) \(\1.*\)"/\1\t\2/p')"

# Prepare variables
INTERNAL_ID="eDP-1"
HOME_WIDE_ID=""
HOME_TALL_ID=""
WORK_LEFT_ID=""
WORK_RIGHT_ID=""

echo "Found the following monitors:"
for monitor in "${MONITORS[@]}" ; do
    id="$(cut -d $'\t' -f1 <<< "${monitor}")"
    name="$(cut -d $'\t' -f2 <<< "${monitor}")"
    echo "  > ${id} named '${name}'"
    # Figure out which id corresponds to which monitor
    if [[ "${id}" != "${INTERNAL_ID}" ]] ; then
        grep -q "VP3881" <<< "${name}" && HOME_WIDE_ID="${id}" && continue
        grep -q "U2414H" <<< "${name}" && HOME_TALL_ID="${id}" && continue
        [[ -z "${WORK_LEFT_ID}" ]] && WORK_LEFT_ID="${id}" && continue
        [[ -n "${WORK_LEFT_ID}" ]] && WORK_RIGHT_ID="${id}" && continue
    fi
done

CMD=("wlr-randr")

# Set work laptop monitors
if [[ "${HOSTNAME}" = xps-work ]] ; then
    echo "Configuring monitors for work laptop"
    if [[ -n "${WORK_LEFT_ID}" ]] && [[ -n "${WORK_RIGHT_ID}" ]] ; then
        echo "Setting monitors in office configuration (docked)"
        CMD+=("--output" "${INTERNAL_ID}" "--off")
        CMD+=("--output" "${WORK_LEFT_ID}" "--on" "--mode" "2560x1440@59.951000Hz" "--pos" "0,0" "--scale" "1")
        CMD+=("--output" "${WORK_RIGHT_ID}" "--on" "--mode" "2560x1440@59.951000Hz" "--pos" "2560,0" "--scale" "1")
    elif [[ -n "${HOME_WIDE_ID}" ]] && [[ -n "${HOME_TALL_ID}" ]] ; then
        echo "Setting monitors in home configuration (docked)"
        CMD+=("--output" "${INTERNAL_ID}" "--off")
        CMD+=("--output" "${HOME_WIDE_ID}" "--on" "--mode" "3840x1600@60.000999Hz" "--pos" "0,0" "--transform" "normal" "--scale" "1")
        CMD+=("--output" "${HOME_TALL_ID}" "--on" "--mode" "1920x1080@60.000000Hz" "--pos" "3840,0" "--transform" "270" "--scale" "1")
    elif [[ -n "${HOME_WIDE_ID}" ]] ; then
        echo "Setting monitors in home configuration (PBP with HDMI)"
        CMD+=("--output" "${INTERNAL_ID}" "--on" "--mode" "3456x2160@60.000999Hz" "--pos" "0,0" "--scale" "2")
        CMD+=("--output" "${HOME_WIDE_ID}" "--on" "--mode" "1920x1600@59.950001Hz" "--pos" "864,-1600" "--transform" "normal" "--scale" "1")
    else
        echo "Setting monitors in default configuration (undocked)"
        CMD+=("--output" "${INTERNAL_ID}" "--on" "--mode" "3456x2160@60.000999Hz" "--pos" "0,0" "--scale" "2")
    fi
elif [[ "${HOSTNAME}" = frame-home ]] ; then
    if [[ -n "${HOME_WIDE_ID}" ]] && [[ -n "${HOME_TALL_ID}" ]] ; then
        echo "Setting monitors in home configuration (docked)"
        CMD+=("--output" "${INTERNAL_ID}" "--off")
        CMD+=("--output" "${HOME_WIDE_ID}" "--on" "--mode" "3840x1600@60.000999Hz" "--pos" "1080,0" "--transform" "normal" "--scale" "1")
        CMD+=("--output" "${HOME_TALL_ID}" "--on" "--mode" "1920x1080@60.000000Hz" "--pos" "0,0" "--transform" "270" "--scale" "1")
    else
        echo "Configuring monitors for home laptop"
        echo "Setting monitors in default configuration (undocked)"
        CMD+=("--output" "${INTERNAL_ID}" "--on" "--mode" "2256x1504@59.999001Hz" "--pos" "0,0" "--scale" "1.5")
    fi
else
    echo "No configuration found, exiting"
    exit 1
fi

# If check flag is passed then we just say what we'd do
if [[ "${1:-}" = "--check" ]] ; then
    echo "Check done!"
else
    echo "Running command"
    "${CMD[@]}"
fi
